HOW TO USE IT
-------------
Please note that this is not production quality code, so the implementation provided may not be optimal.
This is an experimental drop meant for the users to get started with (multi-channel) video streaming usecase
with TI-Graphics SDK.

Requirements:
============
	1) TI Linux Graphics SDK - Can be obtained from (http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/gfxsdk/4_06_00_03/index_FDS.html).
	2) Open sources Gstreamer installation on TARGET Filesystem.
	3) CMEM sources for building cmemk module.

Note: The Graphics_SDK_4_06_00_03 onwards has support for I420/YV12 formats with bufferclass driver.

Build and Install:
================= 
1) Set the following Variables in <ROOT_DIR>/<gst-plugin_dir>/src/rules.make
	a) GSDK_ROOT = /path/to/graphics SDK root
        b) TGTFS_PATH = /path/to/NFS/Flesystem
        c) CMEM_DIR = /path/to/cmem/sources
        d) GSTREAMER_SRC_DIR = /path/to/gstreamer/sources/opensource_build
	e) CROSS_COMPILE= CROSS_COMPILE_PREFIX

Note:  	i) Graphics SDK build/installation instructions can be obtsined from here -
	http://processors.wiki.ti.com/index.php/Graphics_SDK_Quick_installation_and_user_guide

	ii) For supporting multichannel video streaming rebuild and install Graphics SDK by modifying the following -
		+	"#define SYS_DEVICE_COUNT 10" 
			in <GSDK_ROOT>/GFX_Linux_KM/services4/system/ti335x/sysinfo.h

		+	"#define DEVICE_COUNT 4"
			in <GSDK_ROOT>/GFX_Linux_KM/services4/3rdparty/bufferclass_ti/bc_cat.c

	iii) Platform requires bufferclass_ti.ko and cmemk.ko modules along with pvrsrv and omaplfb drivers.
		a) User needs to separately build cmemk module and insmod with appropriate arguments.
		b) Other modules mentioned above will be built as a part of Graphics SDK.

	iv) User should separately build/install open source gstreamer (ARM only) to the TARGET FILE SYSTEM

	 v) This package has been validated with arago-static toolchain (for building gstreamer and plugin).


2) Edit <gst-plugin_dir>/autogen.sh and add host/prefix values as appropriate
	host=toolchain-prefix
        prefix=<GSDK_ROOT>/usr

3) export PKG_CONFIG_PATH=<Gstreamer_src_dir>/pkgconfig/

4) Run autogen.sh from <gst_plugin> dir

5) On sucessful execution of above run -
	a) "make" followed by "make install".

	The above step installs the following -
	libtool: install: /usr/bin/install -c .libs/libgstbc.so <TGTFS_PATH>/usr/lib/gstreamer-0.10/libgstbc.so
	libtool: install: /usr/bin/install -c .libs/libgstbc.lai  <TGTFS_PATH>/usr/lib/gstreamer-0.10/libgstbc.la
	libtool: install: /usr/bin/install -c .libs/libgstbc.a  <TGTFS_PATH>/usr/lib/gstreamer-0.10/libgstbc.a
	libtool: install: chmod 644  <TGTFS_PATH>/usr/lib/gstreamer-0.10/libgstbc.a
	libtool: install: arm-arago-linux-gnueabi-ranlib  <TGTFS_PATH>/usr/lib/gstreamer-0.10/libgstbc.a

6)  Set "INST_DEST" in the <bc_renderer>/Makefile to desirable path to install the binary on <TARGET_FILESYSTEM>.
	Note: Make sure that the directory exists on the filesystem.

6) Build the renderer sources from <bc_renderer> dir and install using -
	a) "make" followed by "make install".
	
	The above step installs bcRenderer to <INST_DEST> dir.

Testing:
=======

1) On target run the following to test for sucessful installation of plugin -
	a) gst-inspect bcsink - Displays information about plugin if installed

2) Copy <ROOT_DIR>/vsgui/vsGUI to <TGTFS_PATH>/<INST_DEST> on TARGET

3) Copy <ROOT_DIR>/init.sh to <TGTFS_PATH>/<INST_DIR> on TARGET and set "PATH_TO_CMEM" to location where cmemk.ko is present.
	a) Edit cmemk parameters as appropriate - For multichannel video streaming, allocate the memory into as many pools as the channels.
	a) cd <TGTFS_PATH>/<INST_DIR>
	b) execute ./init.sh
		1) It initializes (cmemk, bufferclass_ti) kernel modules.
		2) Creates appropriate named pipes.
		3) Starts Qt GUI for enabling touch events.

4) Start bcRenderer process in the background from the <TGTFS_PATH>/<INST_DIR> as follows -
	a) ./bcRenderer &

5) Now you are ready to start gstreamer pipelines as shown in "Sample Pipelines" section.

Note: Please note that upto max 4 pipelines can be launched in parallel depending on the available bandwidth.

Normalized Device Co-Ordinates and bcSink:
========================================

	The Normalized Device Coordinate (NDC) space ranges from -1.0 to 1.0 in both x and y. This space is device independent
and appears identical for all the platforms. Refer the following figure to see the organization of the NDC space.

      (-1.0, 1.0)      (0.0, 1.0)       (1.0, 1.0)
		------------------------
		|	    |		|
		|     1	    | 	 2	|
		|     	    |	 	|
		| 	    |(0.0,0.0)	|
     (-1.0, 0.0)|-----------------------|(1.0, 0.0)
		| 	    |		|
		| 	    |		|
		|     3     |	 4	|
		| 	    |		|
		 ------------------------
   	 (-1.0, -1.0)	(0.0, -1.0)	 (1.0, -1.0)


	a) The co-ordinate values are floating point numbers ranging from [-1.0. 1.0] both in x and y.
	b) The Width and Height are positive floating point numbers in the range [0.0, 2.0].
	c) The top left corner (-1.0, 1.0) is considered as the origin.
	d) Please see the examples below to understand how to specify the dimensions from cmdline to bcsink  -

		i) Quadant-1
			<gst-launch ...> ! bcsink x-pos=-1.0 y-pos=1.0 width=1.0 height=1.0

		ii) Quadant-2
			<gst-launch ...> ! bcsink x-pos=0.0 y-pos=1.0 width=1.0 height=1.0

		iii) Quadant-3
			<gst-launch ...> ! bcsink x-pos=-1.0 y-pos=0.0 width=1.0 height=1.0

		iv) Quadant-4
			<gst-launch ...> ! bcsink x-pos=0.0 y-pos=0.0 width=1.0 height=1.0

		iv) Full Screen
			<gst-launch ...> ! bcsink x-pos=-1.0 y-pos=1.0 width=2.0 height=2.0


Note:	1) Users can specify any arbitrary values as parameters to bcsink in the valid range.
====
	2) Incase of overlap the instances corresponding to the higher device numbers are shown on the top.
	   For example, launching four instances of bcsink with overlaps, the first instance corresponding to device-0 is the
           bottom most followed by the instances corresponding to device-1, device-2 and device-3 respectively.

	3) If no parameters are specified to the bcsink, the default values are assumed i.e, the instance corresponding to device-0
	   is associated with Quadrant-1, device-1 with Quadrant-2 and so on..


Sample Pipelines:
================

1) Default video test:
   ------------------
Launch the following two processes on the target -
	a) gst-launch videotestsrc ! 'video/x-raw-yuv, format=(fourcc)UYVY, width=320, height=240, framerate=24/1' ! bcsink [x-pos=<x-cord> y-pos=<y-cord> width=<width> height=<height> ] &

	Output: You can observe videotessrc pattern on the target display in one of the four quads.
		see <documentation>/Output.jpg

2) USB Camera capture:
   ------------------
Launch the following two processes on the target -
	a) gst-launch v4l2src ! 'video/x-raw-yuv, width=320,height=240,framerate=24/1' ! bcsink &

	Output: You can observe camera capture preview on the target display in one of the four quads.

3) MPEG video decode:
   -----------------
Launch the following two processes on the target -
	a) gst-launch filesrc location=/sample.mpg ! mpegdemux ! ffdec_mpegvideo ! ffmpegcolorspace ! 'video/x-raw-yuv, format=(fourcc)UYVY' ! bcsink [x-pos=<x-cord> y-pos=<y-cord> width=<width> height=<height>] &

	Output: You can observe the video being decoded on the target display in one of the four quads.

4) AVI/MP4/MPEG video decode:
   -------------------------
Launch the following two processes on the target -
	a) gst-launch filesrc location=/sample.avi ! decodebin2 name=dec ! bcsink [x-pos=<x-cord> y-pos=<y-cord> width=<width> height=<height>]
	b) gst-launch filesrc location=/sample.mp4 ! decodebin2 name=dec ! bcsink [x-pos=<x-cord> y-pos=<y-cord> width=<width> height=<height>]
 
	Output: You can observe video being decoded on the target display in one of the four quads.

Note: To switch from regualr mode to full screen, tap/press on the  desired video window and viceversa to return to regular display.

Feature Additions:
=================

	a) Supports playing multiple videos (upto 4) each launched as a separate instances of gstreamer as shown above.
	b) Supports switching between quad mode/ full screen.
	c) Supports arbitrary resolutions for the video from commandline.
	d) Supports I420/YV12 formats with Graphics_SDK_4_06_00_03 and above.
 
        Note: The performance might vary based on the dimensions of video being decoded.
 
Note:  Input video stream dimensions and color formats for a given channel must remain same through out.
